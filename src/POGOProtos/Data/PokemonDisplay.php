<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Data/PokemonDisplay.proto
 */


namespace POGOProtos\Data;

/**
 * Protobuf message : POGOProtos.Data.PokemonDisplay
 */
class PokemonDisplay extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * costume optional enum = 1
     *
     * @var \POGOProtos\Enums\Costume
     */
    protected $costume = null;

    /**
     * gender optional enum = 2
     *
     * @var \POGOProtos\Enums\Gender
     */
    protected $gender = null;

    /**
     * shiny optional bool = 3
     *
     * @var bool
     */
    protected $shiny = null;

    /**
     * form optional enum = 4
     *
     * @var \POGOProtos\Enums\Form
     */
    protected $form = null;

    /**
     * Check if 'costume' has a value
     *
     * @return bool
     */
    public function hasCostume()
    {
        return $this->costume !== null;
    }

    /**
     * Get 'costume' value
     *
     * @return \POGOProtos\Enums\Costume
     */
    public function getCostume()
    {
        return $this->costume;
    }

    /**
     * Set 'costume' value
     *
     * @param \POGOProtos\Enums\Costume $value
     */
    public function setCostume(\POGOProtos\Enums\Costume $value = null)
    {
        $this->costume = $value;
    }

    /**
     * Check if 'gender' has a value
     *
     * @return bool
     */
    public function hasGender()
    {
        return $this->gender !== null;
    }

    /**
     * Get 'gender' value
     *
     * @return \POGOProtos\Enums\Gender
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * Set 'gender' value
     *
     * @param \POGOProtos\Enums\Gender $value
     */
    public function setGender(\POGOProtos\Enums\Gender $value = null)
    {
        $this->gender = $value;
    }

    /**
     * Check if 'shiny' has a value
     *
     * @return bool
     */
    public function hasShiny()
    {
        return $this->shiny !== null;
    }

    /**
     * Get 'shiny' value
     *
     * @return bool
     */
    public function getShiny()
    {
        return $this->shiny;
    }

    /**
     * Set 'shiny' value
     *
     * @param bool $value
     */
    public function setShiny($value = null)
    {
        $this->shiny = $value;
    }

    /**
     * Check if 'form' has a value
     *
     * @return bool
     */
    public function hasForm()
    {
        return $this->form !== null;
    }

    /**
     * Get 'form' value
     *
     * @return \POGOProtos\Enums\Form
     */
    public function getForm()
    {
        return $this->form;
    }

    /**
     * Set 'form' value
     *
     * @param \POGOProtos\Enums\Form $value
     */
    public function setForm(\POGOProtos\Enums\Form $value = null)
    {
        $this->form = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'costume' => null,
            'gender' => null,
            'shiny' => null,
            'form' => null
        ], $values);

        $message->setCostume($values['costume']);
        $message->setGender($values['gender']);
        $message->setShiny($values['shiny']);
        $message->setForm($values['form']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'PokemonDisplay',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'costume',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.Costume'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'gender',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.Gender'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'shiny',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'form',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.Form'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->costume !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->costume->value());
        }

        if ($this->gender !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->gender->value());
        }

        if ($this->shiny !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->shiny);
        }

        if ($this->form !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->form->value());
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->costume = \POGOProtos\Enums\Costume::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->gender = \POGOProtos\Enums\Gender::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->shiny = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->form = \POGOProtos\Enums\Form::valueOf($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->costume !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->costume->value());
        }

        if ($this->gender !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->gender->value());
        }

        if ($this->shiny !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->form !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->form->value());
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->costume = null;
        $this->gender = null;
        $this->shiny = null;
        $this->form = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Data\PokemonDisplay) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->costume = ($message->costume !== null) ? $message->costume : $this->costume;
        $this->gender = ($message->gender !== null) ? $message->gender : $this->gender;
        $this->shiny = ($message->shiny !== null) ? $message->shiny : $this->shiny;
        $this->form = ($message->form !== null) ? $message->form : $this->form;
    }


}

