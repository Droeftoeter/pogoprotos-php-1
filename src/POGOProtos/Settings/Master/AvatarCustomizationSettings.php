<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Settings/Master/AvatarCustomizationSettings.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.AvatarCustomizationSettings
 */
class AvatarCustomizationSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * enabled optional bool = 1
     *
     * @var bool
     */
    protected $enabled = null;

    /**
     * avatar_type optional enum = 2
     *
     * @var \POGOProtos\Data\Player\PlayerAvatarType
     */
    protected $avatar_type = null;

    /**
     * slot repeated enum = 3
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\Slot>
     */
    protected $slot = null;

    /**
     * bundle_name optional string = 4
     *
     * @var string
     */
    protected $bundle_name = null;

    /**
     * asset_name optional string = 5
     *
     * @var string
     */
    protected $asset_name = null;

    /**
     * group_name optional string = 6
     *
     * @var string
     */
    protected $group_name = null;

    /**
     * sort_order optional int32 = 7
     *
     * @var int
     */
    protected $sort_order = null;

    /**
     * unlock_type optional enum = 8
     *
     * @var \POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationUnlockType
     */
    protected $unlock_type = null;

    /**
     * promo_type repeated enum = 9
     *
     * @var \Protobuf\Collection<\POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationPromoType>
     */
    protected $promo_type = null;

    /**
     * unlock_badge_type optional enum = 10
     *
     * @var \POGOProtos\Enums\BadgeType
     */
    protected $unlock_badge_type = null;

    /**
     * iap_sku optional string = 11
     *
     * @var string
     */
    protected $iap_sku = null;

    /**
     * unlock_badge_level optional int32 = 12
     *
     * @var int
     */
    protected $unlock_badge_level = null;

    /**
     * icon_name optional string = 13
     *
     * @var string
     */
    protected $icon_name = null;

    /**
     * unlock_player_level optional int32 = 14
     *
     * @var int
     */
    protected $unlock_player_level = null;

    /**
     * Check if 'enabled' has a value
     *
     * @return bool
     */
    public function hasEnabled()
    {
        return $this->enabled !== null;
    }

    /**
     * Get 'enabled' value
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Set 'enabled' value
     *
     * @param bool $value
     */
    public function setEnabled($value = null)
    {
        $this->enabled = $value;
    }

    /**
     * Check if 'avatar_type' has a value
     *
     * @return bool
     */
    public function hasAvatarType()
    {
        return $this->avatar_type !== null;
    }

    /**
     * Get 'avatar_type' value
     *
     * @return \POGOProtos\Data\Player\PlayerAvatarType
     */
    public function getAvatarType()
    {
        return $this->avatar_type;
    }

    /**
     * Set 'avatar_type' value
     *
     * @param \POGOProtos\Data\Player\PlayerAvatarType $value
     */
    public function setAvatarType(\POGOProtos\Data\Player\PlayerAvatarType $value = null)
    {
        $this->avatar_type = $value;
    }

    /**
     * Check if 'slot' has a value
     *
     * @return bool
     */
    public function hasSlotList()
    {
        return $this->slot !== null;
    }

    /**
     * Get 'slot' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\Slot>
     */
    public function getSlotList()
    {
        return $this->slot;
    }

    /**
     * Set 'slot' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\Slot> $value
     */
    public function setSlotList(\Protobuf\Collection $value = null)
    {
        $this->slot = $value;
    }

    /**
     * Add a new element to 'slot'
     *
     * @param \POGOProtos\Enums\Slot $value
     */
    public function addSlot(\POGOProtos\Enums\Slot $value)
    {
        if ($this->slot === null) {
            $this->slot = new \Protobuf\EnumCollection();
        }

        $this->slot->add($value);
    }

    /**
     * Check if 'bundle_name' has a value
     *
     * @return bool
     */
    public function hasBundleName()
    {
        return $this->bundle_name !== null;
    }

    /**
     * Get 'bundle_name' value
     *
     * @return string
     */
    public function getBundleName()
    {
        return $this->bundle_name;
    }

    /**
     * Set 'bundle_name' value
     *
     * @param string $value
     */
    public function setBundleName($value = null)
    {
        $this->bundle_name = $value;
    }

    /**
     * Check if 'asset_name' has a value
     *
     * @return bool
     */
    public function hasAssetName()
    {
        return $this->asset_name !== null;
    }

    /**
     * Get 'asset_name' value
     *
     * @return string
     */
    public function getAssetName()
    {
        return $this->asset_name;
    }

    /**
     * Set 'asset_name' value
     *
     * @param string $value
     */
    public function setAssetName($value = null)
    {
        $this->asset_name = $value;
    }

    /**
     * Check if 'group_name' has a value
     *
     * @return bool
     */
    public function hasGroupName()
    {
        return $this->group_name !== null;
    }

    /**
     * Get 'group_name' value
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->group_name;
    }

    /**
     * Set 'group_name' value
     *
     * @param string $value
     */
    public function setGroupName($value = null)
    {
        $this->group_name = $value;
    }

    /**
     * Check if 'sort_order' has a value
     *
     * @return bool
     */
    public function hasSortOrder()
    {
        return $this->sort_order !== null;
    }

    /**
     * Get 'sort_order' value
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->sort_order;
    }

    /**
     * Set 'sort_order' value
     *
     * @param int $value
     */
    public function setSortOrder($value = null)
    {
        $this->sort_order = $value;
    }

    /**
     * Check if 'unlock_type' has a value
     *
     * @return bool
     */
    public function hasUnlockType()
    {
        return $this->unlock_type !== null;
    }

    /**
     * Get 'unlock_type' value
     *
     * @return \POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationUnlockType
     */
    public function getUnlockType()
    {
        return $this->unlock_type;
    }

    /**
     * Set 'unlock_type' value
     *
     * @param \POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationUnlockType $value
     */
    public function setUnlockType(\POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationUnlockType $value = null)
    {
        $this->unlock_type = $value;
    }

    /**
     * Check if 'promo_type' has a value
     *
     * @return bool
     */
    public function hasPromoTypeList()
    {
        return $this->promo_type !== null;
    }

    /**
     * Get 'promo_type' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationPromoType>
     */
    public function getPromoTypeList()
    {
        return $this->promo_type;
    }

    /**
     * Set 'promo_type' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationPromoType> $value
     */
    public function setPromoTypeList(\Protobuf\Collection $value = null)
    {
        $this->promo_type = $value;
    }

    /**
     * Add a new element to 'promo_type'
     *
     * @param
     * \POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationPromoType
     * $value
     */
    public function addPromoType(\POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationPromoType $value)
    {
        if ($this->promo_type === null) {
            $this->promo_type = new \Protobuf\EnumCollection();
        }

        $this->promo_type->add($value);
    }

    /**
     * Check if 'unlock_badge_type' has a value
     *
     * @return bool
     */
    public function hasUnlockBadgeType()
    {
        return $this->unlock_badge_type !== null;
    }

    /**
     * Get 'unlock_badge_type' value
     *
     * @return \POGOProtos\Enums\BadgeType
     */
    public function getUnlockBadgeType()
    {
        return $this->unlock_badge_type;
    }

    /**
     * Set 'unlock_badge_type' value
     *
     * @param \POGOProtos\Enums\BadgeType $value
     */
    public function setUnlockBadgeType(\POGOProtos\Enums\BadgeType $value = null)
    {
        $this->unlock_badge_type = $value;
    }

    /**
     * Check if 'iap_sku' has a value
     *
     * @return bool
     */
    public function hasIapSku()
    {
        return $this->iap_sku !== null;
    }

    /**
     * Get 'iap_sku' value
     *
     * @return string
     */
    public function getIapSku()
    {
        return $this->iap_sku;
    }

    /**
     * Set 'iap_sku' value
     *
     * @param string $value
     */
    public function setIapSku($value = null)
    {
        $this->iap_sku = $value;
    }

    /**
     * Check if 'unlock_badge_level' has a value
     *
     * @return bool
     */
    public function hasUnlockBadgeLevel()
    {
        return $this->unlock_badge_level !== null;
    }

    /**
     * Get 'unlock_badge_level' value
     *
     * @return int
     */
    public function getUnlockBadgeLevel()
    {
        return $this->unlock_badge_level;
    }

    /**
     * Set 'unlock_badge_level' value
     *
     * @param int $value
     */
    public function setUnlockBadgeLevel($value = null)
    {
        $this->unlock_badge_level = $value;
    }

    /**
     * Check if 'icon_name' has a value
     *
     * @return bool
     */
    public function hasIconName()
    {
        return $this->icon_name !== null;
    }

    /**
     * Get 'icon_name' value
     *
     * @return string
     */
    public function getIconName()
    {
        return $this->icon_name;
    }

    /**
     * Set 'icon_name' value
     *
     * @param string $value
     */
    public function setIconName($value = null)
    {
        $this->icon_name = $value;
    }

    /**
     * Check if 'unlock_player_level' has a value
     *
     * @return bool
     */
    public function hasUnlockPlayerLevel()
    {
        return $this->unlock_player_level !== null;
    }

    /**
     * Get 'unlock_player_level' value
     *
     * @return int
     */
    public function getUnlockPlayerLevel()
    {
        return $this->unlock_player_level;
    }

    /**
     * Set 'unlock_player_level' value
     *
     * @param int $value
     */
    public function setUnlockPlayerLevel($value = null)
    {
        $this->unlock_player_level = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'enabled' => null,
            'avatar_type' => null,
            'slot' => [],
            'bundle_name' => null,
            'asset_name' => null,
            'group_name' => null,
            'sort_order' => null,
            'unlock_type' => null,
            'promo_type' => [],
            'unlock_badge_type' => null,
            'iap_sku' => null,
            'unlock_badge_level' => null,
            'icon_name' => null,
            'unlock_player_level' => null
        ], $values);

        $message->setEnabled($values['enabled']);
        $message->setAvatarType($values['avatar_type']);
        $message->setBundleName($values['bundle_name']);
        $message->setAssetName($values['asset_name']);
        $message->setGroupName($values['group_name']);
        $message->setSortOrder($values['sort_order']);
        $message->setUnlockType($values['unlock_type']);
        $message->setUnlockBadgeType($values['unlock_badge_type']);
        $message->setIapSku($values['iap_sku']);
        $message->setUnlockBadgeLevel($values['unlock_badge_level']);
        $message->setIconName($values['icon_name']);
        $message->setUnlockPlayerLevel($values['unlock_player_level']);

        foreach ($values['slot'] as $item) {
            $message->addSlot($item);
        }

        foreach ($values['promo_type'] as $item) {
            $message->addPromoType($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'AvatarCustomizationSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'avatar_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Data.Player.PlayerAvatarType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'slot',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.Slot'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'bundle_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'asset_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'group_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'sort_order',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'unlock_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.AvatarCustomizationSettings.AvatarCustomizationUnlockType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'promo_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Settings.Master.AvatarCustomizationSettings.AvatarCustomizationPromoType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'unlock_badge_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.BadgeType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'iap_sku',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'unlock_badge_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'icon_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'unlock_player_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->enabled !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->enabled);
        }

        if ($this->avatar_type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->avatar_type->value());
        }

        if ($this->slot !== null) {
            foreach ($this->slot as $val) {
                $writer->writeVarint($stream, 24);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->bundle_name !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->bundle_name);
        }

        if ($this->asset_name !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->asset_name);
        }

        if ($this->group_name !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->group_name);
        }

        if ($this->sort_order !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->sort_order);
        }

        if ($this->unlock_type !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->unlock_type->value());
        }

        if ($this->promo_type !== null) {
            foreach ($this->promo_type as $val) {
                $writer->writeVarint($stream, 72);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->unlock_badge_type !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->unlock_badge_type->value());
        }

        if ($this->iap_sku !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->iap_sku);
        }

        if ($this->unlock_badge_level !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->unlock_badge_level);
        }

        if ($this->icon_name !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->icon_name);
        }

        if ($this->unlock_player_level !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->unlock_player_level);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->avatar_type = \POGOProtos\Data\Player\PlayerAvatarType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                $innerSize  = $reader->readVarint($stream);
                $innerLimit = $stream->tell() + $innerSize;

                if ($this->slot === null) {
                    $this->slot = new \Protobuf\EnumCollection();
                }

                while ($stream->tell() < $innerLimit) {
                    $this->slot->add(\POGOProtos\Enums\Slot::valueOf($reader->readVarint($stream)));
                }

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->bundle_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->asset_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->group_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->sort_order = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->unlock_type = \POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationUnlockType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 9) {
                $innerSize  = $reader->readVarint($stream);
                $innerLimit = $stream->tell() + $innerSize;

                if ($this->promo_type === null) {
                    $this->promo_type = new \Protobuf\EnumCollection();
                }

                while ($stream->tell() < $innerLimit) {
                    $this->promo_type->add(\POGOProtos\Settings\Master\AvatarCustomizationSettings\AvatarCustomizationPromoType::valueOf($reader->readVarint($stream)));
                }

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->unlock_badge_type = \POGOProtos\Enums\BadgeType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->iap_sku = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->unlock_badge_level = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->icon_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->unlock_player_level = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->enabled !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->avatar_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->avatar_type->value());
        }

        if ($this->slot !== null) {
            foreach ($this->slot as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->bundle_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->bundle_name);
        }

        if ($this->asset_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->asset_name);
        }

        if ($this->group_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->group_name);
        }

        if ($this->sort_order !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sort_order);
        }

        if ($this->unlock_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unlock_type->value());
        }

        if ($this->promo_type !== null) {
            foreach ($this->promo_type as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->unlock_badge_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unlock_badge_type->value());
        }

        if ($this->iap_sku !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->iap_sku);
        }

        if ($this->unlock_badge_level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unlock_badge_level);
        }

        if ($this->icon_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->icon_name);
        }

        if ($this->unlock_player_level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unlock_player_level);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->enabled = null;
        $this->avatar_type = null;
        $this->slot = null;
        $this->bundle_name = null;
        $this->asset_name = null;
        $this->group_name = null;
        $this->sort_order = null;
        $this->unlock_type = null;
        $this->promo_type = null;
        $this->unlock_badge_type = null;
        $this->iap_sku = null;
        $this->unlock_badge_level = null;
        $this->icon_name = null;
        $this->unlock_player_level = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\AvatarCustomizationSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->enabled = ($message->enabled !== null) ? $message->enabled : $this->enabled;
        $this->avatar_type = ($message->avatar_type !== null) ? $message->avatar_type : $this->avatar_type;
        $this->slot = ($message->slot !== null) ? $message->slot : $this->slot;
        $this->bundle_name = ($message->bundle_name !== null) ? $message->bundle_name : $this->bundle_name;
        $this->asset_name = ($message->asset_name !== null) ? $message->asset_name : $this->asset_name;
        $this->group_name = ($message->group_name !== null) ? $message->group_name : $this->group_name;
        $this->sort_order = ($message->sort_order !== null) ? $message->sort_order : $this->sort_order;
        $this->unlock_type = ($message->unlock_type !== null) ? $message->unlock_type : $this->unlock_type;
        $this->promo_type = ($message->promo_type !== null) ? $message->promo_type : $this->promo_type;
        $this->unlock_badge_type = ($message->unlock_badge_type !== null) ? $message->unlock_badge_type : $this->unlock_badge_type;
        $this->iap_sku = ($message->iap_sku !== null) ? $message->iap_sku : $this->iap_sku;
        $this->unlock_badge_level = ($message->unlock_badge_level !== null) ? $message->unlock_badge_level : $this->unlock_badge_level;
        $this->icon_name = ($message->icon_name !== null) ? $message->icon_name : $this->icon_name;
        $this->unlock_player_level = ($message->unlock_player_level !== null) ? $message->unlock_player_level : $this->unlock_player_level;
    }


}

