<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Networking/Envelopes/Signature.proto
 */


namespace POGOProtos\Networking\Envelopes\Signature;

/**
 * Protobuf message : POGOProtos.Networking.Envelopes.Signature.SensorInfo
 */
class SensorInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * timestamp_snapshot optional uint64 = 1
     *
     * @var int
     */
    protected $timestamp_snapshot = null;

    /**
     * linear_acceleration_x optional double = 3
     *
     * @var float
     */
    protected $linear_acceleration_x = null;

    /**
     * linear_acceleration_y optional double = 4
     *
     * @var float
     */
    protected $linear_acceleration_y = null;

    /**
     * linear_acceleration_z optional double = 5
     *
     * @var float
     */
    protected $linear_acceleration_z = null;

    /**
     * magnetic_field_x optional double = 6
     *
     * @var float
     */
    protected $magnetic_field_x = null;

    /**
     * magnetic_field_y optional double = 7
     *
     * @var float
     */
    protected $magnetic_field_y = null;

    /**
     * magnetic_field_z optional double = 8
     *
     * @var float
     */
    protected $magnetic_field_z = null;

    /**
     * rotation_vector_x optional double = 10
     *
     * @var float
     */
    protected $rotation_vector_x = null;

    /**
     * rotation_vector_y optional double = 11
     *
     * @var float
     */
    protected $rotation_vector_y = null;

    /**
     * rotation_vector_z optional double = 12
     *
     * @var float
     */
    protected $rotation_vector_z = null;

    /**
     * gyroscope_raw_x optional double = 13
     *
     * @var float
     */
    protected $gyroscope_raw_x = null;

    /**
     * gyroscope_raw_y optional double = 14
     *
     * @var float
     */
    protected $gyroscope_raw_y = null;

    /**
     * gyroscope_raw_z optional double = 15
     *
     * @var float
     */
    protected $gyroscope_raw_z = null;

    /**
     * gravity_x optional double = 16
     *
     * @var float
     */
    protected $gravity_x = null;

    /**
     * gravity_y optional double = 17
     *
     * @var float
     */
    protected $gravity_y = null;

    /**
     * gravity_z optional double = 18
     *
     * @var float
     */
    protected $gravity_z = null;

    /**
     * accelerometer_axes optional uint64 = 19
     *
     * @var int
     */
    protected $accelerometer_axes = null;

    /**
     * Check if 'timestamp_snapshot' has a value
     *
     * @return bool
     */
    public function hasTimestampSnapshot()
    {
        return $this->timestamp_snapshot !== null;
    }

    /**
     * Get 'timestamp_snapshot' value
     *
     * @return int
     */
    public function getTimestampSnapshot()
    {
        return $this->timestamp_snapshot;
    }

    /**
     * Set 'timestamp_snapshot' value
     *
     * @param int $value
     */
    public function setTimestampSnapshot($value = null)
    {
        $this->timestamp_snapshot = $value;
    }

    /**
     * Check if 'linear_acceleration_x' has a value
     *
     * @return bool
     */
    public function hasLinearAccelerationX()
    {
        return $this->linear_acceleration_x !== null;
    }

    /**
     * Get 'linear_acceleration_x' value
     *
     * @return float
     */
    public function getLinearAccelerationX()
    {
        return $this->linear_acceleration_x;
    }

    /**
     * Set 'linear_acceleration_x' value
     *
     * @param float $value
     */
    public function setLinearAccelerationX($value = null)
    {
        $this->linear_acceleration_x = $value;
    }

    /**
     * Check if 'linear_acceleration_y' has a value
     *
     * @return bool
     */
    public function hasLinearAccelerationY()
    {
        return $this->linear_acceleration_y !== null;
    }

    /**
     * Get 'linear_acceleration_y' value
     *
     * @return float
     */
    public function getLinearAccelerationY()
    {
        return $this->linear_acceleration_y;
    }

    /**
     * Set 'linear_acceleration_y' value
     *
     * @param float $value
     */
    public function setLinearAccelerationY($value = null)
    {
        $this->linear_acceleration_y = $value;
    }

    /**
     * Check if 'linear_acceleration_z' has a value
     *
     * @return bool
     */
    public function hasLinearAccelerationZ()
    {
        return $this->linear_acceleration_z !== null;
    }

    /**
     * Get 'linear_acceleration_z' value
     *
     * @return float
     */
    public function getLinearAccelerationZ()
    {
        return $this->linear_acceleration_z;
    }

    /**
     * Set 'linear_acceleration_z' value
     *
     * @param float $value
     */
    public function setLinearAccelerationZ($value = null)
    {
        $this->linear_acceleration_z = $value;
    }

    /**
     * Check if 'magnetic_field_x' has a value
     *
     * @return bool
     */
    public function hasMagneticFieldX()
    {
        return $this->magnetic_field_x !== null;
    }

    /**
     * Get 'magnetic_field_x' value
     *
     * @return float
     */
    public function getMagneticFieldX()
    {
        return $this->magnetic_field_x;
    }

    /**
     * Set 'magnetic_field_x' value
     *
     * @param float $value
     */
    public function setMagneticFieldX($value = null)
    {
        $this->magnetic_field_x = $value;
    }

    /**
     * Check if 'magnetic_field_y' has a value
     *
     * @return bool
     */
    public function hasMagneticFieldY()
    {
        return $this->magnetic_field_y !== null;
    }

    /**
     * Get 'magnetic_field_y' value
     *
     * @return float
     */
    public function getMagneticFieldY()
    {
        return $this->magnetic_field_y;
    }

    /**
     * Set 'magnetic_field_y' value
     *
     * @param float $value
     */
    public function setMagneticFieldY($value = null)
    {
        $this->magnetic_field_y = $value;
    }

    /**
     * Check if 'magnetic_field_z' has a value
     *
     * @return bool
     */
    public function hasMagneticFieldZ()
    {
        return $this->magnetic_field_z !== null;
    }

    /**
     * Get 'magnetic_field_z' value
     *
     * @return float
     */
    public function getMagneticFieldZ()
    {
        return $this->magnetic_field_z;
    }

    /**
     * Set 'magnetic_field_z' value
     *
     * @param float $value
     */
    public function setMagneticFieldZ($value = null)
    {
        $this->magnetic_field_z = $value;
    }

    /**
     * Check if 'rotation_vector_x' has a value
     *
     * @return bool
     */
    public function hasRotationVectorX()
    {
        return $this->rotation_vector_x !== null;
    }

    /**
     * Get 'rotation_vector_x' value
     *
     * @return float
     */
    public function getRotationVectorX()
    {
        return $this->rotation_vector_x;
    }

    /**
     * Set 'rotation_vector_x' value
     *
     * @param float $value
     */
    public function setRotationVectorX($value = null)
    {
        $this->rotation_vector_x = $value;
    }

    /**
     * Check if 'rotation_vector_y' has a value
     *
     * @return bool
     */
    public function hasRotationVectorY()
    {
        return $this->rotation_vector_y !== null;
    }

    /**
     * Get 'rotation_vector_y' value
     *
     * @return float
     */
    public function getRotationVectorY()
    {
        return $this->rotation_vector_y;
    }

    /**
     * Set 'rotation_vector_y' value
     *
     * @param float $value
     */
    public function setRotationVectorY($value = null)
    {
        $this->rotation_vector_y = $value;
    }

    /**
     * Check if 'rotation_vector_z' has a value
     *
     * @return bool
     */
    public function hasRotationVectorZ()
    {
        return $this->rotation_vector_z !== null;
    }

    /**
     * Get 'rotation_vector_z' value
     *
     * @return float
     */
    public function getRotationVectorZ()
    {
        return $this->rotation_vector_z;
    }

    /**
     * Set 'rotation_vector_z' value
     *
     * @param float $value
     */
    public function setRotationVectorZ($value = null)
    {
        $this->rotation_vector_z = $value;
    }

    /**
     * Check if 'gyroscope_raw_x' has a value
     *
     * @return bool
     */
    public function hasGyroscopeRawX()
    {
        return $this->gyroscope_raw_x !== null;
    }

    /**
     * Get 'gyroscope_raw_x' value
     *
     * @return float
     */
    public function getGyroscopeRawX()
    {
        return $this->gyroscope_raw_x;
    }

    /**
     * Set 'gyroscope_raw_x' value
     *
     * @param float $value
     */
    public function setGyroscopeRawX($value = null)
    {
        $this->gyroscope_raw_x = $value;
    }

    /**
     * Check if 'gyroscope_raw_y' has a value
     *
     * @return bool
     */
    public function hasGyroscopeRawY()
    {
        return $this->gyroscope_raw_y !== null;
    }

    /**
     * Get 'gyroscope_raw_y' value
     *
     * @return float
     */
    public function getGyroscopeRawY()
    {
        return $this->gyroscope_raw_y;
    }

    /**
     * Set 'gyroscope_raw_y' value
     *
     * @param float $value
     */
    public function setGyroscopeRawY($value = null)
    {
        $this->gyroscope_raw_y = $value;
    }

    /**
     * Check if 'gyroscope_raw_z' has a value
     *
     * @return bool
     */
    public function hasGyroscopeRawZ()
    {
        return $this->gyroscope_raw_z !== null;
    }

    /**
     * Get 'gyroscope_raw_z' value
     *
     * @return float
     */
    public function getGyroscopeRawZ()
    {
        return $this->gyroscope_raw_z;
    }

    /**
     * Set 'gyroscope_raw_z' value
     *
     * @param float $value
     */
    public function setGyroscopeRawZ($value = null)
    {
        $this->gyroscope_raw_z = $value;
    }

    /**
     * Check if 'gravity_x' has a value
     *
     * @return bool
     */
    public function hasGravityX()
    {
        return $this->gravity_x !== null;
    }

    /**
     * Get 'gravity_x' value
     *
     * @return float
     */
    public function getGravityX()
    {
        return $this->gravity_x;
    }

    /**
     * Set 'gravity_x' value
     *
     * @param float $value
     */
    public function setGravityX($value = null)
    {
        $this->gravity_x = $value;
    }

    /**
     * Check if 'gravity_y' has a value
     *
     * @return bool
     */
    public function hasGravityY()
    {
        return $this->gravity_y !== null;
    }

    /**
     * Get 'gravity_y' value
     *
     * @return float
     */
    public function getGravityY()
    {
        return $this->gravity_y;
    }

    /**
     * Set 'gravity_y' value
     *
     * @param float $value
     */
    public function setGravityY($value = null)
    {
        $this->gravity_y = $value;
    }

    /**
     * Check if 'gravity_z' has a value
     *
     * @return bool
     */
    public function hasGravityZ()
    {
        return $this->gravity_z !== null;
    }

    /**
     * Get 'gravity_z' value
     *
     * @return float
     */
    public function getGravityZ()
    {
        return $this->gravity_z;
    }

    /**
     * Set 'gravity_z' value
     *
     * @param float $value
     */
    public function setGravityZ($value = null)
    {
        $this->gravity_z = $value;
    }

    /**
     * Check if 'accelerometer_axes' has a value
     *
     * @return bool
     */
    public function hasAccelerometerAxes()
    {
        return $this->accelerometer_axes !== null;
    }

    /**
     * Get 'accelerometer_axes' value
     *
     * @return int
     */
    public function getAccelerometerAxes()
    {
        return $this->accelerometer_axes;
    }

    /**
     * Set 'accelerometer_axes' value
     *
     * @param int $value
     */
    public function setAccelerometerAxes($value = null)
    {
        $this->accelerometer_axes = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'timestamp_snapshot' => null,
            'linear_acceleration_x' => null,
            'linear_acceleration_y' => null,
            'linear_acceleration_z' => null,
            'magnetic_field_x' => null,
            'magnetic_field_y' => null,
            'magnetic_field_z' => null,
            'rotation_vector_x' => null,
            'rotation_vector_y' => null,
            'rotation_vector_z' => null,
            'gyroscope_raw_x' => null,
            'gyroscope_raw_y' => null,
            'gyroscope_raw_z' => null,
            'gravity_x' => null,
            'gravity_y' => null,
            'gravity_z' => null,
            'accelerometer_axes' => null
        ], $values);

        $message->setTimestampSnapshot($values['timestamp_snapshot']);
        $message->setLinearAccelerationX($values['linear_acceleration_x']);
        $message->setLinearAccelerationY($values['linear_acceleration_y']);
        $message->setLinearAccelerationZ($values['linear_acceleration_z']);
        $message->setMagneticFieldX($values['magnetic_field_x']);
        $message->setMagneticFieldY($values['magnetic_field_y']);
        $message->setMagneticFieldZ($values['magnetic_field_z']);
        $message->setRotationVectorX($values['rotation_vector_x']);
        $message->setRotationVectorY($values['rotation_vector_y']);
        $message->setRotationVectorZ($values['rotation_vector_z']);
        $message->setGyroscopeRawX($values['gyroscope_raw_x']);
        $message->setGyroscopeRawY($values['gyroscope_raw_y']);
        $message->setGyroscopeRawZ($values['gyroscope_raw_z']);
        $message->setGravityX($values['gravity_x']);
        $message->setGravityY($values['gravity_y']);
        $message->setGravityZ($values['gravity_z']);
        $message->setAccelerometerAxes($values['accelerometer_axes']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'SensorInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'timestamp_snapshot',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'linear_acceleration_x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'linear_acceleration_y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'linear_acceleration_z',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'magnetic_field_x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'magnetic_field_y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'magnetic_field_z',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'rotation_vector_x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'rotation_vector_y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'rotation_vector_z',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'gyroscope_raw_x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'gyroscope_raw_y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'gyroscope_raw_z',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'gravity_x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'gravity_y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'gravity_z',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'accelerometer_axes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->timestamp_snapshot !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->timestamp_snapshot);
        }

        if ($this->linear_acceleration_x !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeDouble($stream, $this->linear_acceleration_x);
        }

        if ($this->linear_acceleration_y !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeDouble($stream, $this->linear_acceleration_y);
        }

        if ($this->linear_acceleration_z !== null) {
            $writer->writeVarint($stream, 41);
            $writer->writeDouble($stream, $this->linear_acceleration_z);
        }

        if ($this->magnetic_field_x !== null) {
            $writer->writeVarint($stream, 49);
            $writer->writeDouble($stream, $this->magnetic_field_x);
        }

        if ($this->magnetic_field_y !== null) {
            $writer->writeVarint($stream, 57);
            $writer->writeDouble($stream, $this->magnetic_field_y);
        }

        if ($this->magnetic_field_z !== null) {
            $writer->writeVarint($stream, 65);
            $writer->writeDouble($stream, $this->magnetic_field_z);
        }

        if ($this->rotation_vector_x !== null) {
            $writer->writeVarint($stream, 81);
            $writer->writeDouble($stream, $this->rotation_vector_x);
        }

        if ($this->rotation_vector_y !== null) {
            $writer->writeVarint($stream, 89);
            $writer->writeDouble($stream, $this->rotation_vector_y);
        }

        if ($this->rotation_vector_z !== null) {
            $writer->writeVarint($stream, 97);
            $writer->writeDouble($stream, $this->rotation_vector_z);
        }

        if ($this->gyroscope_raw_x !== null) {
            $writer->writeVarint($stream, 105);
            $writer->writeDouble($stream, $this->gyroscope_raw_x);
        }

        if ($this->gyroscope_raw_y !== null) {
            $writer->writeVarint($stream, 113);
            $writer->writeDouble($stream, $this->gyroscope_raw_y);
        }

        if ($this->gyroscope_raw_z !== null) {
            $writer->writeVarint($stream, 121);
            $writer->writeDouble($stream, $this->gyroscope_raw_z);
        }

        if ($this->gravity_x !== null) {
            $writer->writeVarint($stream, 129);
            $writer->writeDouble($stream, $this->gravity_x);
        }

        if ($this->gravity_y !== null) {
            $writer->writeVarint($stream, 137);
            $writer->writeDouble($stream, $this->gravity_y);
        }

        if ($this->gravity_z !== null) {
            $writer->writeVarint($stream, 145);
            $writer->writeDouble($stream, $this->gravity_z);
        }

        if ($this->accelerometer_axes !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->accelerometer_axes);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->timestamp_snapshot = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->linear_acceleration_x = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->linear_acceleration_y = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->linear_acceleration_z = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->magnetic_field_x = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->magnetic_field_y = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->magnetic_field_z = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->rotation_vector_x = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->rotation_vector_y = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->rotation_vector_z = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->gyroscope_raw_x = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->gyroscope_raw_y = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->gyroscope_raw_z = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->gravity_x = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->gravity_y = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->gravity_z = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->accelerometer_axes = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->timestamp_snapshot !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->timestamp_snapshot);
        }

        if ($this->linear_acceleration_x !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->linear_acceleration_y !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->linear_acceleration_z !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->magnetic_field_x !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->magnetic_field_y !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->magnetic_field_z !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->rotation_vector_x !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->rotation_vector_y !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->rotation_vector_z !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->gyroscope_raw_x !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->gyroscope_raw_y !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->gyroscope_raw_z !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->gravity_x !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->gravity_y !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->gravity_z !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->accelerometer_axes !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->accelerometer_axes);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->timestamp_snapshot = null;
        $this->linear_acceleration_x = null;
        $this->linear_acceleration_y = null;
        $this->linear_acceleration_z = null;
        $this->magnetic_field_x = null;
        $this->magnetic_field_y = null;
        $this->magnetic_field_z = null;
        $this->rotation_vector_x = null;
        $this->rotation_vector_y = null;
        $this->rotation_vector_z = null;
        $this->gyroscope_raw_x = null;
        $this->gyroscope_raw_y = null;
        $this->gyroscope_raw_z = null;
        $this->gravity_x = null;
        $this->gravity_y = null;
        $this->gravity_z = null;
        $this->accelerometer_axes = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Envelopes\Signature\SensorInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->timestamp_snapshot = ($message->timestamp_snapshot !== null) ? $message->timestamp_snapshot : $this->timestamp_snapshot;
        $this->linear_acceleration_x = ($message->linear_acceleration_x !== null) ? $message->linear_acceleration_x : $this->linear_acceleration_x;
        $this->linear_acceleration_y = ($message->linear_acceleration_y !== null) ? $message->linear_acceleration_y : $this->linear_acceleration_y;
        $this->linear_acceleration_z = ($message->linear_acceleration_z !== null) ? $message->linear_acceleration_z : $this->linear_acceleration_z;
        $this->magnetic_field_x = ($message->magnetic_field_x !== null) ? $message->magnetic_field_x : $this->magnetic_field_x;
        $this->magnetic_field_y = ($message->magnetic_field_y !== null) ? $message->magnetic_field_y : $this->magnetic_field_y;
        $this->magnetic_field_z = ($message->magnetic_field_z !== null) ? $message->magnetic_field_z : $this->magnetic_field_z;
        $this->rotation_vector_x = ($message->rotation_vector_x !== null) ? $message->rotation_vector_x : $this->rotation_vector_x;
        $this->rotation_vector_y = ($message->rotation_vector_y !== null) ? $message->rotation_vector_y : $this->rotation_vector_y;
        $this->rotation_vector_z = ($message->rotation_vector_z !== null) ? $message->rotation_vector_z : $this->rotation_vector_z;
        $this->gyroscope_raw_x = ($message->gyroscope_raw_x !== null) ? $message->gyroscope_raw_x : $this->gyroscope_raw_x;
        $this->gyroscope_raw_y = ($message->gyroscope_raw_y !== null) ? $message->gyroscope_raw_y : $this->gyroscope_raw_y;
        $this->gyroscope_raw_z = ($message->gyroscope_raw_z !== null) ? $message->gyroscope_raw_z : $this->gyroscope_raw_z;
        $this->gravity_x = ($message->gravity_x !== null) ? $message->gravity_x : $this->gravity_x;
        $this->gravity_y = ($message->gravity_y !== null) ? $message->gravity_y : $this->gravity_y;
        $this->gravity_z = ($message->gravity_z !== null) ? $message->gravity_z : $this->gravity_z;
        $this->accelerometer_axes = ($message->accelerometer_axes !== null) ? $message->accelerometer_axes : $this->accelerometer_axes;
    }


}

